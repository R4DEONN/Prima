import {TokenType} from "./TokenType";

export const TYPE_TO_TERMINAL: Partial<Record<TokenType, string>> = {
    [TokenType.LEFT_PAREN]: "~(~",
    [TokenType.RIGHT_PAREN]: "~)~",
    [TokenType.LEFT_BRACE]: "~{~",
    [TokenType.RIGHT_BRACE]: "~}~",
    [TokenType.COMMA]: "~,~",
    [TokenType.DOT]: "~.~",
    [TokenType.SEMICOLON]: "~;~",
    [TokenType.SLASH]: "~/~",
    [TokenType.PERCENT]: "~%~",
    [TokenType.COLON]: "~:~",
    [TokenType.BANG]: "~!~",
    [TokenType.BANG_EQUAL]: "~!=~",
    [TokenType.EQUAL]: "~=~",
    [TokenType.EQUAL_EQUAL]: "~==~",
    [TokenType.GREATER]: "~>~",
    [TokenType.GREATER_EQUAL]: "~>=~",
    [TokenType.LESS]: "~<~",
    [TokenType.LESS_EQUAL]: "~<=~",
    [TokenType.STAR]: "~*~",
    [TokenType.STAR_STAR]: "~**~",
    [TokenType.PLUS]: "~+~",
    [TokenType.PLUS_EQUAL]: "~+=~",
    [TokenType.PLUS_PLUS]: "~++~",
    [TokenType.MINUS]: "~-~",
    [TokenType.MINUS_EQUAL]: "~-=~",
    [TokenType.MINUS_MINUS]: "~--~",
    [TokenType.IDENTIFIER]: "~Identifier~",
    [TokenType.STRING]: "~StringLiteral~",
    [TokenType.NUMBER]: "~NumberLiteral~",
    [TokenType.AND]: "~&&~",
    [TokenType.CLASS]: "~class~",
    [TokenType.ELSE]: "~else~",
    [TokenType.FALSE]: "~BooleanLiteral~",
    [TokenType.FUNCTION]: "~function~",
    [TokenType.FOR]: "~for~",
    [TokenType.IF]: "~if~",
    [TokenType.OR]: "~||~",
    [TokenType.RETURN]: "~return~",
    [TokenType.TRUE]: "~BooleanLiteral~",
    [TokenType.VAR]: "~var~",
    [TokenType.CONST]: "~const~",
    [TokenType.ABSTRACT]: "~abstract~",
    [TokenType.PUBLIC]: "~public~",
    [TokenType.PROTECTED]: "~protected~",
    [TokenType.PRIVATE]: "~private~",
    [TokenType.OVERRIDE]: "~override~",
    [TokenType.STATIC]: "~static~",
    [TokenType.CONSTRUCTOR]: "~constructor~",
    [TokenType.EXTENDS]: "~extends~",
    [TokenType.IMPORT]: "~import~",
    [TokenType.EXPORT]: "~export~",
    [TokenType.AS]: "~as~",
    [TokenType.EOF]: "~#~",
};